// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package main

import (
	"fmt"
	"io"
	"math"

	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf

func (t *Transaction) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{166}); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Type (main.TransactionType) (uint8)
	if len("Type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Type\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, "Type"); err != nil {
		return err
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Type)); err != nil {
		return err
	}

	// t.From (main.Address) (slice)
	if len("From") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"From\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("From"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, "From"); err != nil {
		return err
	}

	if len(t.From) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.From was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.From))); err != nil {
		return err
	}

	if _, err := w.Write(t.From); err != nil {
		return err
	}

	// t.Nonce (uint64) (uint64)
	if len("Nonce") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Nonce\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Nonce"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, "Nonce"); err != nil {
		return err
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Nonce)); err != nil {
		return err
	}

	// t.To (main.Address) (slice)
	if len("To") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"To\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("To"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, "To"); err != nil {
		return err
	}

	if len(t.To) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.To was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.To))); err != nil {
		return err
	}

	if _, err := w.Write(t.To); err != nil {
		return err
	}

	// t.Data ([]uint8) (slice)
	if len("Data") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Data\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Data"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, "Data"); err != nil {
		return err
	}

	if len(t.Data) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Data was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Data))); err != nil {
		return err
	}

	if _, err := w.Write(t.Data); err != nil {
		return err
	}

	// t.Sig (main.Hash32) (slice)
	if len("Sig") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Sig\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Sig"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, "Sig"); err != nil {
		return err
	}

	if len(t.Sig) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Sig was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Sig))); err != nil {
		return err
	}

	if _, err := w.Write(t.Sig); err != nil {
		return err
	}
	return nil
}

func (t *Transaction) UnmarshalCBOR(r io.Reader) error {
	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("Transaction: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Type (main.TransactionType) (uint8)
		case "Type":

			maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return err
			}
			if maj != cbg.MajUnsignedInt {
				return fmt.Errorf("wrong type for uint8 field")
			}
			if extra > math.MaxUint8 {
				return fmt.Errorf("integer in input was too large for uint8 field")
			}
			t.Type = TransactionType(extra)
			// t.From (main.Address) (slice)
		case "From":

			maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.From: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}
			t.From = make([]byte, extra)
			if _, err := io.ReadFull(br, t.From); err != nil {
				return err
			}
			// t.Nonce (uint64) (uint64)
		case "Nonce":

			{

				maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Nonce = uint64(extra)

			}
			// t.To (main.Address) (slice)
		case "To":

			maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.To: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}
			t.To = make([]byte, extra)
			if _, err := io.ReadFull(br, t.To); err != nil {
				return err
			}
			// t.Data ([]uint8) (slice)
		case "Data":

			maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Data: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}
			t.Data = make([]byte, extra)
			if _, err := io.ReadFull(br, t.Data); err != nil {
				return err
			}
			// t.Sig (main.Hash32) (slice)
		case "Sig":

			maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Sig: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}
			t.Sig = make([]byte, extra)
			if _, err := io.ReadFull(br, t.Sig); err != nil {
				return err
			}

		default:
			return fmt.Errorf("unknown struct field %d: '%s'", i, name)
		}
	}

	return nil
}
